# ================================
# Лабораторная №1 — GitHowTo
# Первые 13 тем
# ================================

# -------------------------------
# Тема 1: Начало работы
# -------------------------------
# Git — это распределённая система контроля версий.
# Она позволяет отслеживать изменения в проекте и возвращаться к любому состоянию.
# Основная команда:
# git init — превращает обычную папку в репозиторий (создаёт скрытую папку .git).

# -------------------------------
# Тема 2: Создание репозитория
# -------------------------------
# Обычно команды выполняются в терминале:
# mkdir my_project         # создаём папку проекта
# cd my_project            # заходим в папку
# git init                # инициализация репозитория
# git status              # проверка статуса (что изменено, что не отслеживается)

# -------------------------------
# Тема 3: Заполнение репозитория
# -------------------------------
# Создаём файл:
# echo "print('Hello Git!')" > main.py
# Добавляем его в индекс:
# git add main.py
# Сохраняем в истории (делаем коммит):
# git commit -m "Initial commit: add main.py"

# -------------------------------
# Тема 4: Публикация изменений
# -------------------------------
# Публикация = коммит (фиксируем изменения).
# git add <файл>   # добавить файл в индекс
# git commit -m "Сообщение"  # сохранить изменения в истории

# -------------------------------
# Тема 5: Внесение изменений
# -------------------------------
# Изменяем файл:
# echo "print('Second version')" >> main.py
# git status    # Git увидит, что файл изменён
# git add main.py
# git commit -m "Added second line"

# -------------------------------
# Тема 6: Просмотр истории коммитов
# -------------------------------
# git log — показывает историю коммитов.
# Удобно использовать короткий формат:
# git log --oneline

# -------------------------------
# Тема 7: Просмотр конкретного коммита
# -------------------------------
# Скопировать хэш из git log (например abc123) и:
# git show abc123  # показать изменения этого коммита

# -------------------------------
# Тема 8: Возврат к предыдущему коммиту
# -------------------------------
# git checkout HEAD~1  # перейти на предыдущий коммит
# cat main.py          # проверяем, что файл вернулся к старому состоянию
# git checkout main    # вернуться на последнюю версию (главная ветка)

# -------------------------------
# Тема 9: Работа с историей изменений
# -------------------------------
# git diff       # показать, что изменилось с момента последнего коммита
# git log --stat # история + статистика (сколько строк изменилось)

# -------------------------------
# Тема 10: Создание ветки
# -------------------------------
# git branch feature   # создаём ветку
# git checkout feature # переключаемся на неё

# -------------------------------
# Тема 11: Переход между ветками
# -------------------------------
# git checkout main    # вернуться на главную ветку
# git checkout feature # снова в ветку feature

# -------------------------------
# Тема 12: Слияние веток
# -------------------------------
# Находясь в main, можно слить feature:
# git merge feature    # изменения из feature попадут в main

# -------------------------------
# Тема 13: Разрешение конфликтов
# -------------------------------
# Если одна и та же строка изменена в двух ветках,
# при merge Git сообщит о конфликте.
# Тогда нужно:
# 1. Открыть файл в редакторе
# 2. Выбрать, какие изменения оставить
# 3. git add main.py
# 4. git commit -m "Resolved merge conflict"
print('hello world')